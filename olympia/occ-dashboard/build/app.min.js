(function(){
	'use strict'

	//Manual bootstrap application
	google.charts.load('current', {'packages':['corechart', 'bar']});

	google.charts.setOnLoadCallback(function() {
	  angular.bootstrap(document.body, ['olympia-app']);
	});

	angular.module('olympia-app', [
		//Third party dependencies
		'ui.router',
		//Application
		'loader.module',
		'common.module',
		'opvolging.module',
		'kangetallen.module'
	]);
})();
(function(){
	'use strict'

	angular.module('kangetallen.module', []);
})();
(function(){
	'use strict'

	angular.module('opvolging.module', []);
})();
(function(){
	'use strict'

	angular.module('common.module', []);
})();
(function(){
	'use strict';
	angular.module('loader.module', []);
})();


(function(){
	'use strict'
	angular.module('olympia-app')
		.config(appConfig);

	appConfig.$inject = ['$stateProvider', '$urlRouterProvider'];

	function appConfig($stateProvider, $urlRouterProvider){
		//States
		$stateProvider
			.state('Opvolging', {
				url : "/opvolging",
				templateUrl : "app/components/opvolging/opvolging.html",
				controller: 'opvolgingCntl',
        		controllerAs: 'olympia'
			})
			.state('Kengetallen', {
				url : "/kengetallen",
				templateUrl : "app/components/kengetallen/kengetallen.html",
				controller: 'kengetallenCntl',
        		controllerAs: 'olympia'
			});

		$urlRouterProvider.otherwise("/opvolging");
	}	
})();
(function(){
	'use strict'

	angular.module('kangetallen.module')
		.service('kengetallenService', kengetallenService);

	kengetallenService.$inject = [];

	function kengetallenService(){
		var vm = this;
	}
})();
(function(){
	'use strict'

	angular.module('opvolging.module')
		.service('opvolgingService', opvolgingService);

	opvolgingService.$inject = ['commonService'];

	function opvolgingService(commonService){
		var vm = this;

		vm.isKandidatenShow = isKandidatenShow;

		///////////////////////

		function isKandidatenShow(){
			var response = commonService.sendItems,
				previousMonth = commonService.dateParser(moment().subtract(2, 'months')), //Last Month
				currentMonth = moment().subtract(0, 'months'),
				end = moment(response.endDate, "DDMMYYYY"), //response.endDate;
				start = moment(response.startDate, "DDMMYYYY");

			//Check if enddate or startdate is empty
			if(response.startDate === "" || response.endDate === ""){
				return false;
			}

			//Condition: 
			//- The selected date range is at least 3 months
			//- The newest date is at least 1 month old"
			if(end.diff(start, "months") >= 2 && currentMonth.diff(end, 'months') >=1){
				return true;
			}else{
				return false;
			}
		}
	}

	opvolgingService.prototype.drawPieChart = function(a, b){
		return function(){
			var data = google.visualization.arrayToDataTable([
	          ['Task', 'Hours per Day'],
	          ['Gecontacteerd',     a],
	          ['Niet gecontacteered',      b],
	        ]);

	        var options = {
	          //title: 'My Daily Activities'
	          chartArea : {top:'10', width:'75%', height:'75%'},
	          legend : {position:'none'},
	          height:'100%',
	          width:'100%',
	          colors: ['#009a2d', '#dd4b39']
	        };

	        var chart = new google.visualization.PieChart(document.getElementById('piechart'));

	        chart.draw(data, options);	
		}
	}

	opvolgingService.prototype.drawPieChart1 = function(a,b,c){
		return function(){
			var data = google.visualization.arrayToDataTable([
	          ['Task', 'Hours per Day'],
	          ['Binnen 1 werkdag', a],
	          ['Binnen 2 werkdagen', b],
	          ['Langer dan 2 werkdagen', c]
	        ]);

	        var options = {
	          //title: 'My Daily Activities'
	          chartArea : {top:'10', width:'75%', height:'75%'},
	          legend : {position:'none'},
	          height:'100%',
	          width:'100%',
	          colors: ['#009a2d', '#dd4b39', '#dd4b39']
	        };

	        var chart = new google.visualization.PieChart(document.getElementById('piechart1'));

	        chart.draw(data, options);
		}
	}

	opvolgingService.prototype.drawPieChart2 = function(a, b){
		return function(){
			var data = google.visualization.arrayToDataTable([
	          ['Task', 'Hours per Day'],
	          ['Pool-/intakegesprek plaatsgevonden', a],
	          ['Geenverdereopvolging', b],
	        ]);

	        var options = {
	          //title: 'My Daily Activities'
	          chartArea : {top:'10', width:'75%', height:'75%'},
	          legend : {position:'none'},
	          height:'100%',
	          width:'100%',
	          colors: ['#009a2d', '#dd4b39']
	        };

	        var chart = new google.visualization.PieChart(document.getElementById('piechart2'));

	        chart.draw(data, options);
		}
	}

	opvolgingService.prototype.drawPieChart3 = function(a, b){
		return function(){
			var data = google.visualization.arrayToDataTable([
	          ['Task', 'Hours per Day'],
	          ['Kandidaten geplaatst', a],
	          ['Kandidaten niet geplaatst', b],
	        ]);

	        var options = {
	          title: 'Gesproken kandidaten geplaatst',
	          titleTextStyle : {
	            fontSize : 12,
	          },
	          chartArea : {top:'20', width:'80%', height:'100%'},
	          legend : {position:'none'},
	          height:'100%',
	          width:'100%',
	          colors: ['#009a2d', '#dd4b39']
	        };

	        var chart = new google.visualization.PieChart(document.getElementById('piechart3'));

	        chart.draw(data, options);	
		}
	}

	opvolgingService.prototype.drawPieChart7 = function(a, b){
		return function(){
			var data = google.visualization.arrayToDataTable([
				['Task', 'Hours per Day'],
				['Kandidaten geplaatst', a],
				['Kandidaten niet geplaatst', b],
			]);

			var options = {
				title: 'Voorgestelde kandidaten geplaatst',
				titleTextStyle : {
				fontSize : 12,
				},
				chartArea : {top:'20', width:'80%', height:'100%'},
				legend : {position:'none'},
				height:'100%',
				width:'100%',
				colors: ['#009a2d', '#dd4b39']
			};

			var chart = new google.visualization.PieChart(document.getElementById('piechart7'));

			chart.draw(data, options);
		}	
	}

	opvolgingService.prototype.stackedBarChart = function(a, b){
		return function(){
			var data = google.visualization.arrayToDataTable([
		      ['year', 'Uitzendplaatsingen met urenbriefje', 'W&S plaatsingengefactureerd',
		       { role: 'annotation' } ],
		      ['Plaatsingen', a, b, ''],
		    ]);

		    var options = {
		      width:'100%',
		      height: '100%',
		      legend: { position: 'top', maxLines: 3 },
		      bar: { groupWidth: '75%' },
		      isStacked: true,
		      colors: ["#171580", "#cccccc",]
		    };
		    var chart = new google.visualization.ColumnChart(document.getElementById('stackedChart'));
		    chart.draw(data, options);	
		}
	}

	opvolgingService.prototype.stackedBarChart1 = function(a, b, c, d){
		return function(){
			var data = google.visualization.arrayToDataTable([
		      ['time', 'green', 'red',
		       { role: 'annotation' } ],
		      ['1e Wk', a, (100-a),''],
		      ['1e Mnd', b, (100-b),''],
		      ['3e Mnd', c, (100-c),''],
		      ['>6Mnd', d, (100-d),'']
		    ]);

		    var options = {
		      width:'100%',
		      height: '100%',
		      legend: { position: 'top', maxLines: 3 },
		      bar: { groupWidth: '75%' },
		      isStacked: 'percent',
		      colors: ["#009a2d", "#dd4b39"]
		    };
		    var chart = new google.visualization.ColumnChart(document.getElementById('stackedChart1'));
		    chart.draw(data, options);	
		}
	}

	opvolgingService.prototype.columnChart = function(a, b, c, d, e){
		return function(){
			var data = google.visualization.arrayToDataTable([
		      ['', ''],
		      ['Gespreksdatum', a],
		      ['Voorsteldatum', b],
		      ['Sollicitatieingevoerd', c],
		      ['Sollicitatiedatum', d],
		      ['Plaatsingsdatum_normaal Plaatsingdatum_wervings', e]
		    ]);

		    var options = {
		      width:'100%',
		      height: '100%',
		      legend: { position: 'none'},
		      colors: ["#009a2d", "#dd4b39"]
		    };
		    var chart = new google.visualization.ColumnChart(document.getElementById('columnChart'));
		    chart.draw(data, options);	
		}
	}

	opvolgingService.prototype.columnChart1 = function(a, b){
		return function(){
			var data = google.visualization.arrayToDataTable([
		      ['', ''],
		      ['Uitzendplaatsingen aangemaakt', a],
		      ['W&S plaatsingen aangemaakt', b]
		    ]);

		    var options = {
		      width:'100%',
		      height: '100%',
		      legend: { position: 'none'},
		      colors: ["#009a2d", "#dd4b39"]
		    };
		    var chart = new google.visualization.ColumnChart(document.getElementById('columnChart1'));
		    chart.draw(data, options);	
		}
	}
})();
(function(){
	'use strict'

	angular.module('common.module')
		.service('commonService', commonService);

	commonService.$inject = ['$timeout', '$http', '$q', 'enumApp', '$rootScope'];

	function commonService($timeout, $http, $q, enumApp, $rootScope){

		this.rootScope = $rootScope;
		this.timeout = $timeout;

		this.sendItems = {
			'startDate' : '',
			'endDate' : '',
			'officesList' : [1]
		};

	    this.getRandomMessage = getRandomMessage;
	    this.getDashboardData = getDashboardData;
	    this.dateParser = dateParser;

	    //////////////////////////////////////////////

	    function getRandomMessage(){
	      var num = Math.floor(enumApp.RANDOMMESSAGE.length * Math.random());
	      return enumApp.RANDOMMESSAGE[num];
	    }

	    function getDashboardData(){
	      var deffered = $q.defer();

	      $http({
	        url : enumApp.URL + "GetOccDashBoardReports",
	        method : "GET",
	        params : {
	        	'officesList' : this.sendItems.officesList,
	        	'startDate' : this.sendItems.startDate,
	        	'endDate' : this.sendItems.endDate
	        }
	      })
	      .success(function(data){
	        deffered.resolve(data);       
	      })
	      .error(function(){
	        deffered.reject("Failed to post data");
	      });

	      return deffered.promise;
	    }

	    function dateParser(dateTimeToParse, format){
			if(typeof dateTimeToParse === 'undefined')
				return false;

			var parsed = moment(dateTimeToParse).format("DDMMYYYY");
			return parsed;
		}
	}

  //commonService.prototype.dashboardData = {"kandidatenCcerapportageNumber":2442,"gecontacteerdNumber":1769,"gecontacteerdPercent":72.4,"nietGecontacteeredNumber":673,"nietGecontacteeredPercent":27.6,"eenWerkdagGesproken":0,"eenWerkdagVoiceMail":0,"eenWerkdagPercent":0.0,"tweeWerkdagGesproken":0,"tweeWerkdagVoiceMail":0,"tweeWerkdagPercent":0.0,"langerWerkdagGesproken":0,"langerWerkdagVoiceMail":0,"langerWerkdagPercent":0.0,"passendeKandidatenNumber":2235,"passendeKandidatenCombinedPercent":91.5,"intakegesprekPlaatsgevondenNumber":22,"intakegesprekPlaatsgevondenPercent":1.0,"verdereOpvolgingNumber":1534,"verdereOpvolgingPercent":68.6,"kandidatenVoorgesteldklantNumber":6,"kandidatenVoorgesteldklantPercent":27.3,"sollicitatiegesprekkenIngeplandKlantNumber":4,"sollicitatiegesprekkenIngeplandKlantPercent":18.2,"sollicitatiegesprekkenIngeplandKlantCombinedPercent":66.7,"sollicitatiegesprekkenPlaatsgevondenKlantNumber":0,"sollicitatiegesprekkenPlaatsgevondenKlantPercent":0.0,"sollicitatiegesprekkenPlaatsgevondenKlantCombinedPercent":0.0,"kandidatenGeplaatstNumber":0,"kandidatenGeplaatstPercent":0.0,"kandidatenGeplaatstCombinedPercent":0.0,"kandidatenNietGeplaatstNumber":22,"kandidatenNietGeplaatstPercent":100.0,"kandidatenNietGeplaatstCombinedPercent":0.0,"kandidatenGeplaatstGesprokenChart":0.0,"kandidatenNietGeplaatstGesprokenChart":100.0,"kandidatenGeplaatstVoorgesteldeChart":0.0,"kandidatenNietGeplaatstVoorgesteldeChart":366.7,"uitzendPlaatsingenAangemaaktNumber":0,"uitzendPlaatsingenAangemaaktPercent":0.0,"wsPlaatsingenAangemaaktNumber":0,"wsPlaatsingenAangemaaktPercent":0.0,"totaalAantalPlaatsingenAangemaakt":0,"uitzendplaatsingenMetUrenbriefjeNumber":0,"uitzendplaatsingenMetUrenbriefjePercent":0.0,"wsPlaatsingenGefactureerdNumber":0,"wsPlaatsingenGefactureerdPercent":0.0,"totaalAantalPlaatsingenPlaatsgevonden":0,"contactMomentOneWeekNumberTotal":122,"contactMomentOneWeekNumberActual":2,"contactMomentOneWeekPercent":1.6,"contactMomentOneMaandNumberTotal":72,"contactMomentOneMaandNumberActual":2,"contactMomentOneMaandPercent":2.8,"contactMomentThreeMaandNumberTotal":5,"contactMomentThreeMaandNumberActual":0,"contactMomentThreeMaandPercent":0.0,"contactVanafSixMaandenNumberTotal":8,"contactVanafSixMaandenNumberActual":0,"contactVanafSixMaandenPercent":0.0}

  	commonService.prototype.dashboardData = {};

	commonService.prototype.chartCallBack = function(fn){
			google.charts.setOnLoadCallback(fn);	
	}
	
	commonService.prototype.drawPieChart5 = function(){
		var data = google.visualization.arrayToDataTable([
          ['Task', 'Hours per Day'],
          ['0-39 ‘niet passend', 2],
          ['40-75 ‘passend’', 6],
        ]);

        var options = {
          //title: 'My Daily Activities'
          chartArea : {top:'10', width:'75%', height:'75%'},
          legend : {position:'none'},
          height:'100%',
          width:'100%',
          colors: ['#009a2d', '#dd4b39']
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart5'));

        chart.draw(data, options);
	}
	commonService.prototype.stackedBarChart1 = function(){
	  	var data = google.visualization.arrayToDataTable([
	      ['time', 'green', 'red',
	       { role: 'annotation' } ],
	      ['1e Wk', 10, 24,''],
	      ['1e Mnd', 16, 22,''],
	      ['3e Mnd', 28, 19,''],
	      ['>6Mnd', 28, 19,'']
	    ]);

	    var options = {
	      width:'100%',
	      height: '100%',
	      legend: { position: 'top', maxLines: 3 },
	      bar: { groupWidth: '75%' },
	      isStacked: 'percent',
	      colors: ["#009a2d", "#dd4b39"]
	    };
	    var chart = new google.visualization.ColumnChart(document.getElementById('stackedChart1'));
	    chart.draw(data, options);
	}
	commonService.prototype.initializeSelect2 = function(ele){
		var self = this;
		$(ele).select2({
			placeholder: "Select a option",
			width:'253'
		});	

		$(ele).on('change', function (evt) {
		  // Do something
		  var selectedValue = $(ele).val();

		  self.sendItems.officesList = selectedValue;

		  self.rootScope.$broadcast('dateRangePickerChanged');
		});
	};
	commonService.prototype.initializeDateRange = function(ele){
		var self = this;

		$(ele).daterangepicker({
			initialText: 'Selecteer periode',
			presetRanges: [{
			    text: 'Afgelopen 7 dagen', //Last 7 days
			    dateStart: function () {
			        return moment().subtract(7, 'days')
			    },
			    dateEnd: function () {
			        return moment()
			    }
			}, {
			    text: 'Deze week', //This week, Monday up to present day of the week.
			    dateStart: function () {
			        return moment().startOf('week').add(1, 'days')
			    },
			    dateEnd: function () {
			        return moment()
			    }
			}, {
			    text: 'Vorige week', //Previous week. So Monday untill Sunday of the previous week
			    dateStart: function () {
			        return moment().subtract(1, 'weeks').startOf('week')
			    },
			    dateEnd: function () {
			        return moment().subtract(1, 'weeks').endOf('week')
			    }
			}, {
			    text: 'Afgelopen 30 dagen', //Take the last 30 days. Should be the same as the standard view
			    dateStart: function () {
			        return moment().subtract(29, 'days')
			    },
			    dateEnd: function () {
			        return moment()
			    }
			}, {
			    text: 'Vorige maand',
			    dateStart: function () {
			        return moment().subtract(1, 'months').startOf('month')
			    },
			    dateEnd: function () {
			        return moment().subtract(1, 'months').endOf('month')
			    }
			}],
			applyButtonText: "Toepassen",
			applyOnMenuSelect: false,
			widget : function(event, data){console.log(event, data);}
		});

		$(ele).on('change' , callBack);

		function callBack(){
			var dateRange = $(ele).daterangepicker("getRange"),
				startDate = self.dateParser(dateRange.start, "DDMMYYYY"),
				endDate = self.dateParser(dateRange.end, "DDMMYYYY");

			//set startdate and enddate
			self.sendItems.startDate =startDate;
			self.sendItems.endDate =endDate;

			self.rootScope.$broadcast('dateRangePickerChanged');
		}
	}
})();
(function(){
	'use script';
	angular.module('loader.module')
		.service('loaderService', loaderService);

	function loaderService(){
		this.isLoader = false;
		this.toggle = toggle;
		this.loaderState = loaderState; 

		//To toggle loader
		function toggle(state){
			this.isLoader = state;
		}

		//Returns state of the loader
		function loaderState(){
			return this.isLoader;
		}
	}
})();
(function(){
	'use strict'

	angular.module('olympia-app')
		.controller('olympiaCntl', olympiaCntl);

	olympiaCntl.$inject = ['loaderService', 'commonService', '$scope', '$rootScope'];

	function olympiaCntl(loaderService, commonService, $scope, $rootScope){
		var vm = this;

		activate();

		/////////////////////////////

		function activate(){
			
		}	
	}
})();
(function(){
	'use strict'

	angular.module('kangetallen.module')
		.controller('kengetallenCntl', kengetallenCntl);

	kengetallenCntl.$inject = ['kengetallenService', 'commonService'];

	function kengetallenCntl(kengetallenService, commonService){
		var vm = this;

		activate();

		///////////////////

		function activate(){
			commonService.initializeSelect2('.multiSelectOption');
			commonService.initializeDateRange('.calenderRange');
			commonService.chartCallBack(commonService.drawPieChart5);
		}
	}
})();
(function(){
	'use strict'

	angular.module('opvolging.module')
		.controller('opvolgingCntl', opvolgingCntl);

	opvolgingCntl.$inject = ['opvolgingService', 'commonService', '$scope', 'loaderService', '$timeout'];

	function opvolgingCntl(opvolgingService, commonService, $scope, loaderService, $timeout){
		var vm = this;

		vm.isKandidaten = false;
		vm.dashboard = []; 

		activate();

		$scope.$on("dateRangePickerChanged", dateRangePickerChanged);

		///////////////////

		function activate(){
			commonService.initializeSelect2('.multiSelectOption');
			commonService.initializeDateRange('.calenderRange');
			dateRangePickerChanged();
		}

		function dateRangePickerChanged(){
			loaderService.toggle(true);

			commonService.getDashboardData()
				.then(dashboardDataSuccess, dashboardDataError);
		}

		function dashboardDataSuccess(data){
			vm.isKandidaten = opvolgingService.isKandidatenShow();

			commonService.dashboardData = data;

			vm.dashboard = commonService.dashboardData; 
			commonService.chartCallBack(opvolgingService.drawPieChart(vm.dashboard.gecontacteerdPercent, vm.dashboard.nietGecontacteeredPercent));
			commonService.chartCallBack(opvolgingService.drawPieChart1(vm.dashboard.eenWerkdagPercent, vm.dashboard.tweeWerkdagPercent, vm.dashboard.langerWerkdagPercent));
			commonService.chartCallBack(opvolgingService.drawPieChart2(vm.dashboard.intakegesprekPlaatsgevondenPercent, vm.dashboard.verdereOpvolgingPercent));
			commonService.chartCallBack(opvolgingService.stackedBarChart(vm.dashboard.wsPlaatsingenAangemaaktNumber, vm.dashboard.uitzendPlaatsingenAangemaaktNumber));
			commonService.chartCallBack(opvolgingService.stackedBarChart1(vm.dashboard.contactMomentOneWeekPercent, vm.dashboard.contactMomentOneMaandPercent, vm.dashboard.contactMomentThreeMaandPercent, vm.dashboard.contactVanafSixMaandenPercent));
			commonService.chartCallBack(opvolgingService.columnChart(vm.dashboard.allGespreksDatumCandidates, vm.dashboard.allVoorstelDatumCandidates, vm.dashboard.allSollicitatieIngevoerdCandidates, vm.dashboard.allSollicitatieDatumCandidates, vm.dashboard.allPlaatsingsDatumNormaalWervingCandidates));
			commonService.chartCallBack(opvolgingService.columnChart1(vm.dashboard.allPlaatsingsDatumNormaalCandidates, vm.dashboard.allPlaatsingsDatumWervingCandidates));			

			if(vm.isKandidaten){
				$timeout(function(){
					commonService.chartCallBack(opvolgingService.drawPieChart3(vm.dashboard.kandidatenGeplaatstGesprokenChart, vm.dashboard.kandidatenNietGeplaatstGesprokenChart));
					commonService.chartCallBack(opvolgingService.drawPieChart7(vm.dashboard.kandidatenGeplaatstVoorgesteldeChart, vm.dashboard.kandidatenNietGeplaatstVoorgesteldeChart));	
				});
			}

			loaderService.toggle(false);	
		}

		function dashboardDataError(error){
			console.log(error);

			loaderService.toggle(false);
		}	
	}
})();
(function(){
	'use strict'

	angular.module('common.module')
		.controller('commonCtrl', commonCtrl);

	commonCtrl.$inject = [];

	function commonCtrl(){
		var vm = this;
	}
})();
(function(){
	'use strict';
	angular.module('loader.module')
		.directive('olympiaLoader', olympiaLoader);

	olympiaLoader.$inject = ['loaderService', 'commonService'];

	function olympiaLoader(loaderService, commonService) {
	    var directive =  {
	        restrict : 'E',
	        templateUrl : './app/shared/loader/loader.html',
	        scope : false,
	        replace: true,
	        link : function(scope, element, attrs){
	        	var _this = scope;

	        	_this.randomMessage = {}

	        	_this.$watch(
        			function(){
        				return loaderService.isLoader;
        			},

	        		function(){
		        		var flag = loaderService.isLoader;
		        		if(flag){
		        			angular.copy(commonService.getRandomMessage(), _this.randomMessage);
		        			element.show();
		        		}else{
			        		element.hide();
			        	}
	        		}
	        	);
	        }
	    };
	    return directive;
	}
})();


(function(){
	'use strict'

	angular.module('common.module')
		.constant('enumApp', {
			'URL' : '//olympia-jobapplicationprediction-api-test.azurewebsites.net/api/',
			'RANDOMMESSAGE' : [
				{
					'message' : 'Dat de titel van een vacature de meeste impact heeft op hoeveel kandidaten de vacature zien.',
					'link' : 'https://www.athena-intranet.nl/online'
				},
				{
					'message' : 'Dat Olympia het meest zichtbare uitzendbureau van Nederland is bij mensen die op Google zoeken naar “uitzendbureau + plaats”.',
					'link' : 'https://www.athena-intranet.nl/online'
				},
				{
					'message' : 'Dat het aanmaken van meerdere vacatures voor 1 positie veel meer kandidaten aantrekt.',
					'link' : 'https://www.athena-intranet.nl/online'
				},
				{
					'message' : 'Bij functies waarbij zowel parttimers als fulltimers gezocht worden het veel effectiever is om daar aparte vacatures voor aan te maken.',
					'link' : 'https://www.athena-intranet.nl/online'
				},
			]
		});
})();